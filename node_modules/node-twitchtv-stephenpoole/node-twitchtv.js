"use strict"
var request = require("request"),
     logger = require("winston");

class TwitchClient {
  constructor(config) {
    this.baseURL = "https://api.twitch.tv/kraken";

    try {
      this.client_id = config.client_id;
      this.username = config.username;
      this.password = config.password;
      this.scope = config.scope;

    } catch (err) {
      logger.warn("Please remember to set your client_id!");
    }

  }

  auth(config) {
    logger.warn("Authorization is still being implemented.");

    var params = config;
    params.client_id = this.client_id;
    params.username = this.username;
    params.password = this.password;
    params.scope = this.scope;
    params.response_type = "token";

    request.post({
      url: twitch_url + "/oauth2/authorize",
      form: params
    }, function(err, response, body) {});
  };

  streamsChannel(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/streams/" + params.channel, callback);
  };

  streams(callback) {
    this._request("/streams", callback);
  }

  streamsFeatured(callback) {
    this._request("/streams/featured", callback);
  };

  streamsSummary(callback) {
    this._request("/streams/summary", callback);
  };

  streamsFollowed(callback) {
    this._request("/streams/followed", callback);
  };

  gamesTop(params, callback) {
    this._request("/games/top", callback);
  };

  ingests(params, callback) {
    this._request("/ingests", callback);
  };

  channelsChannel(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel, callback);
  };

  channel(callback) {
    this._request("/channel", callback);
  };

  channelsChannelVideos(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel + "/videos", callback);
  };

  channelsChannelFollows(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel + "/follows", callback);
  };

  channelsChannelEditors(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel + "/editors", callback);
  };

  channelsChannelSubscriptions(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel + "/subscriptions", callback);
  };

  channelsChannelTeams(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/channels/" + params.channel + "/teams", callback);
  };

  chatChannel(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/chat/" + params.channel, callback);
  };

  chatChannelBadges(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel) return false;
    this._request("/chat/" + params.channel + "/badges", callback);
  };

  chatEmoticons(callback) {
    this._request("/chat/emoticons", callback);
  };

  chatEmoticonImages(callback) {
    this._request("/chat/emoticon_images", callback);
  };

  usersUser(params, callback) {
    if (typeof params.user == 'undefined' || !params.user) return false;
    this._request("/users/" + params.user, callback);
  };

  usersUserFollowsChannels(params, callback) {
    if (typeof params.user == 'undefined' || !params.user) return false;
    this._request("/users/" + params.user + "/follows/channels", callback);
  };

  usersUserFollowsChannelsTarget(params, callback) {
    if (typeof params.user == 'undefined' || !params.user || typeof params.target == 'undefined' || !params.target) return false;
    this._request("/users/" + params.user + "/follows/channels/" + params.target, callback);
  };

  usersUserSubscriptionsChannel(params, callback) {
    if (typeof params.channel == 'undefined' || !params.channel || typeof params.user == 'undefined' || !params.user) return false;
    this._request("/users/" + params.user + "/subscriptions/" + params.channel, callback);
  };

  usersUserBlocks(params, callback) {
    if (typeof params.user == 'undefined' || !params.user) return false;
    this._request("/users/" + params.user + "/blocks", callback);
  };

  user(callback) {
    this._request("/user", callback);
  }

  videosId(params, callback) {
    if (typeof params.id == 'undefined' || !params.id) return false;
    this._request("/videos" + params.id, callback);
  }

  videosTop(callback) {
    this._request("/videos/top", callback);
  }

  videosFollowed(callback) {
    this._request("/videos/followed", callback);
  }

  teams(callback) {
    this._request("/teams", callback);
  }

  teamsTeam(params, callback) {
    if (typeof params.team == 'undefined' || !params.team) return false;
    this._request("/teams/" + params.team, callback);
  }

  searchChannels(callback) {
    this._request("/search/channels", callback);
  }

  searchStreams(callback) {
    this._request("/search/streams", callback);
  }

  searchGames(callback) {
    this._request("/search/games", callback);
  }

  _request(urlSuffix, callback) {
    if (!callback || typeof callback != 'function') return false;

    var self = this;
    request.get({
      url: self.baseURL + urlSuffix
    }, function(err, response, body) {
      body = JSON.parse(body);
      if (callback) callback.call(self, null, body);
    });
  }
}
module.exports = TwitchClient;
